var documenterSearchIndex = {"docs":
[{"location":"api/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"api/","page":"Utilities","title":"Utilities","text":"The two main general utilities for working with quantities are ustrip and dimension:","category":"page"},{"location":"api/","page":"Utilities","title":"Utilities","text":"ustrip\ndimension","category":"page"},{"location":"api/#DynamicQuantities.ustrip","page":"Utilities","title":"DynamicQuantities.ustrip","text":"ustrip(q::AbstractQuantity)\nustrip(q::AbstractGenericQuantity)\n\nRemove the units from a quantity.\n\n\n\n\n\n","category":"function"},{"location":"api/#DynamicQuantities.dimension","page":"Utilities","title":"DynamicQuantities.dimension","text":"dimension(q::AbstractQuantity)\ndimension(q::AbstractGenericQuantity)\ndimension(x)\n\nGet the dimensions of a quantity, returning an AbstractDimensions object.\n\n\n\n\n\n","category":"function"},{"location":"api/#Accessing-dimensions","page":"Utilities","title":"Accessing dimensions","text":"","category":"section"},{"location":"api/","page":"Utilities","title":"Utilities","text":"Utility functions to extract specific dimensions are as follows:","category":"page"},{"location":"api/","page":"Utilities","title":"Utilities","text":"ulength\numass\nutime\nucurrent\nutemperature\nuluminosity\nuamount","category":"page"},{"location":"api/#DynamicQuantities.ulength","page":"Utilities","title":"DynamicQuantities.ulength","text":"ulength(q::AbstractQuantity)\nulength(q::AbstractGenericQuantity)\nulength(d::AbstractDimensions)\n\nGet the length dimension of a quantity (e.g., meters^(ulength)).\n\n\n\n\n\n","category":"function"},{"location":"api/#DynamicQuantities.umass","page":"Utilities","title":"DynamicQuantities.umass","text":"umass(q::AbstractQuantity)\numass(q::AbstractGenericQuantity)\numass(d::AbstractDimensions)\n\nGet the mass dimension of a quantity (e.g., kg^(umass)).\n\n\n\n\n\n","category":"function"},{"location":"api/#DynamicQuantities.utime","page":"Utilities","title":"DynamicQuantities.utime","text":"utime(q::AbstractQuantity)\nutime(q::AbstractGenericQuantity)\nutime(d::AbstractDimensions)\n\nGet the time dimension of a quantity (e.g., s^(utime))\n\n\n\n\n\n","category":"function"},{"location":"api/#DynamicQuantities.ucurrent","page":"Utilities","title":"DynamicQuantities.ucurrent","text":"ucurrent(q::AbstractQuantity)\nucurrent(q::AbstractGenericQuantity)\nucurrent(d::AbstractDimensions)\n\nGet the current dimension of a quantity (e.g., A^(ucurrent)).\n\n\n\n\n\n","category":"function"},{"location":"api/#DynamicQuantities.utemperature","page":"Utilities","title":"DynamicQuantities.utemperature","text":"utemperature(q::AbstractQuantity)\nutemperature(q::AbstractGenericQuantity)\nutemperature(d::AbstractDimensions)\n\nGet the temperature dimension of a quantity (e.g., K^(utemperature)).\n\n\n\n\n\n","category":"function"},{"location":"api/#DynamicQuantities.uluminosity","page":"Utilities","title":"DynamicQuantities.uluminosity","text":"uluminosity(q::AbstractQuantity)\nuluminosity(q::AbstractGenericQuantity)\nuluminosity(d::AbstractDimensions)\n\nGet the luminosity dimension of a quantity (e.g., cd^(uluminosity)).\n\n\n\n\n\n","category":"function"},{"location":"api/#DynamicQuantities.uamount","page":"Utilities","title":"DynamicQuantities.uamount","text":"uamount(q::AbstractQuantity)\nuamount(q::AbstractGenericQuantity)\nuamount(d::AbstractDimensions)\n\nGet the amount dimension of a quantity (e.g., mol^(uamount)).\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"Utilities","title":"Utilities","text":"Modules = [DynamicQuantities]\nPages   = [\"utils.jl\"]\nFilter  = t -> !(t in [ustrip, dimension, ulength, umass, utime, ucurrent, utemperature, uluminosity, uamount])","category":"page"},{"location":"api/#DynamicQuantities.promote_except_value-Union{Tuple{Q2}, Tuple{Q1}, Tuple{D2}, Tuple{T2}, Tuple{D1}, Tuple{T1}, Tuple{Q1, Q2}} where {T1, D1, T2, D2, Q1<:UnionAbstractQuantity{T1, D1}, Q2<:UnionAbstractQuantity{T2, D2}}","page":"Utilities","title":"DynamicQuantities.promote_except_value","text":"promote_except_value(q1::UnionAbstractQuantity, q2::UnionAbstractQuantity)\n\nThis applies a promotion to the quantity type, and the dimension type, but not the value type. This is necessary because sometimes we would want to multiply a quantity array with a scalar quantity, and wish to use promotion on the quantity type itself, but don't want to promote to a single value type.\n\n\n\n\n\n","category":"method"},{"location":"api/#DynamicQuantities.promote_quantity_on_quantity-Tuple{Type{<:Union{GenericQuantity, Quantity, RealQuantity}}, Type{<:Union{GenericQuantity, Quantity, RealQuantity}}}","page":"Utilities","title":"DynamicQuantities.promote_quantity_on_quantity","text":"promote_quantity_on_quantity(Q1, Q2)\n\nDefines the type hierarchy for quantities, returning the most specific type that is compatible with both input quantity types. For example, promote_quantity_on_quantity(Quantity, GenericQuantity) would return GenericQuantity, as it can store both Quantity and GenericQuantity values. Similarly, promote_quantity_on_quantity(RealQuantity, RealQuantity) would return RealQuantity, as that is the most specific type.\n\nAlso see promote_quantity_on_value.\n\n\n\n\n\n","category":"method"},{"location":"api/#DynamicQuantities.promote_quantity_on_value-Tuple{Type{<:Union{GenericQuantity, Quantity, RealQuantity}}, Type}","page":"Utilities","title":"DynamicQuantities.promote_quantity_on_value","text":"promote_quantity_on_value(Q::Type, T::Type)\n\nFind the next quantity type in the hierarchy that can accommodate the type T. If the current quantity type can already accommodate T, then the current type is returned. For example, promote_quantity_on_value(Quantity, Float64) would return Quantity, and promote_quantity_on_value(RealQuantity, String) would return GenericQuantity. The user should overload this function to define a custom type hierarchy.\n\nAlso see promote_quantity_on_quantity.\n\n\n\n\n\n","category":"method"},{"location":"api/#Internals","page":"Utilities","title":"Internals","text":"","category":"section"},{"location":"api/#FixedRational","page":"Utilities","title":"FixedRational","text":"","category":"section"},{"location":"api/","page":"Utilities","title":"Utilities","text":"FixedRational\nDynamicQuantities.denom","category":"page"},{"location":"api/#DynamicQuantities.FixedRational","page":"Utilities","title":"DynamicQuantities.FixedRational","text":"FixedRational{T,den}\n\nA rational number with a fixed denominator. Significantly faster than Rational{T}, as it never needs to compute the gcd apart from when printing. Access the denominator with denom(F) (which converts to T).\n\nFields\n\nnum: numerator of type T. The denominator is fixed to the type parameter den.\n\n\n\n\n\n","category":"type"},{"location":"api/#DynamicQuantities.denom","page":"Utilities","title":"DynamicQuantities.denom","text":"denom(F::FixedRational)\n\nSince den can be a different type than T, this function is used to get the denominator as a T.\n\n\n\n\n\n","category":"function"},{"location":"constants/#Constants","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"Many common physical constants are available as well:","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"Constants.c\nConstants.h\nConstants.hbar\nConstants.e\nConstants.k_B\nConstants.N_A\nConstants.eV\nConstants.R\nConstants.F\nConstants.sigma_sb\nConstants.alpha\nConstants.u\nConstants.G\nConstants.mu_0\nConstants.eps_0\nConstants.m_e\nConstants.m_p\nConstants.m_n\nConstants.a_0\nConstants.k_e\nConstants.Ryd","category":"page"},{"location":"constants/#DynamicQuantities.Constants.c","page":"Constants","title":"DynamicQuantities.Constants.c","text":"Speed of light in a vacuum. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.h","page":"Constants","title":"DynamicQuantities.Constants.h","text":"Planck constant. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.hbar","page":"Constants","title":"DynamicQuantities.Constants.hbar","text":"Reduced Planck constant (h/2π). Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.e","page":"Constants","title":"DynamicQuantities.Constants.e","text":"Elementary charge. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.k_B","page":"Constants","title":"DynamicQuantities.Constants.k_B","text":"Boltzmann constant. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.N_A","page":"Constants","title":"DynamicQuantities.Constants.N_A","text":"Avogadro constant. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.eV","page":"Constants","title":"DynamicQuantities.Constants.eV","text":"Electron volt. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.R","page":"Constants","title":"DynamicQuantities.Constants.R","text":"Molar gas constant. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.F","page":"Constants","title":"DynamicQuantities.Constants.F","text":"Faraday constant. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.sigma_sb","page":"Constants","title":"DynamicQuantities.Constants.sigma_sb","text":"Stefan-Boltzmann constant. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.alpha","page":"Constants","title":"DynamicQuantities.Constants.alpha","text":"Fine-structure constant. Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.u","page":"Constants","title":"DynamicQuantities.Constants.u","text":"Atomic mass unit (1/12th the mass of Carbon-12). Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.G","page":"Constants","title":"DynamicQuantities.Constants.G","text":"Newtonian constant of gravitation. Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.mu_0","page":"Constants","title":"DynamicQuantities.Constants.mu_0","text":"Vacuum magnetic permeability. Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.eps_0","page":"Constants","title":"DynamicQuantities.Constants.eps_0","text":"Vacuum electric permittivity. Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.m_e","page":"Constants","title":"DynamicQuantities.Constants.m_e","text":"Electron mass. Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.m_p","page":"Constants","title":"DynamicQuantities.Constants.m_p","text":"Proton mass. Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.m_n","page":"Constants","title":"DynamicQuantities.Constants.m_n","text":"Neutron mass. Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.a_0","page":"Constants","title":"DynamicQuantities.Constants.a_0","text":"Bohr radius. Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.k_e","page":"Constants","title":"DynamicQuantities.Constants.k_e","text":"Coulomb constant (Note: SI units only!). Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.Ryd","page":"Constants","title":"DynamicQuantities.Constants.Ryd","text":"Rydberg frequency. Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#Astronomical-constants","page":"Constants","title":"Astronomical constants","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"Constants.M_earth\nConstants.M_sun\nConstants.M_jup\nConstants.R_earth\nConstants.R_jup\nConstants.R_sun\nConstants.L_sun\nConstants.L_bol0\nConstants.sigma_T\nConstants.au\nConstants.pc\nConstants.ly\nConstants.atm","category":"page"},{"location":"constants/#DynamicQuantities.Constants.M_earth","page":"Constants","title":"DynamicQuantities.Constants.M_earth","text":"Earth mass. Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.M_sun","page":"Constants","title":"DynamicQuantities.Constants.M_sun","text":"Solar mass. Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.M_jup","page":"Constants","title":"DynamicQuantities.Constants.M_jup","text":"Jupiter mass. Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.R_earth","page":"Constants","title":"DynamicQuantities.Constants.R_earth","text":"Nominal Earth equatorial radius. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.R_jup","page":"Constants","title":"DynamicQuantities.Constants.R_jup","text":"Nominal Jupiter equatorial radius. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.R_sun","page":"Constants","title":"DynamicQuantities.Constants.R_sun","text":"Nominal solar radius. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.L_sun","page":"Constants","title":"DynamicQuantities.Constants.L_sun","text":"Nominal solar luminosity. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.L_bol0","page":"Constants","title":"DynamicQuantities.Constants.L_bol0","text":"Standard luminosity at absolute bolometric magnitude 0. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.sigma_T","page":"Constants","title":"DynamicQuantities.Constants.sigma_T","text":"Thomson scattering cross-section. Measured.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.au","page":"Constants","title":"DynamicQuantities.Constants.au","text":"Astronomical unit. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.pc","page":"Constants","title":"DynamicQuantities.Constants.pc","text":"Parsec. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.ly","page":"Constants","title":"DynamicQuantities.Constants.ly","text":"Light year. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"constants/#DynamicQuantities.Constants.atm","page":"Constants","title":"DynamicQuantities.Constants.atm","text":"Standard atmosphere. Standard.\n\n\n\n\n\n","category":"constant"},{"location":"examples/#Toy-Examples-with-Code","page":"Examples","title":"Toy Examples with Code","text":"","category":"section"},{"location":"examples/#1.-Solving-a-Chemistry-Homework-Problem","page":"Examples","title":"1. Solving a Chemistry Homework Problem","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"On your chemistry homework, you are faced with the following problem on the photoelectric effect[1]:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"[1]: Attribution: MIT OCW","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"In a photoelectric effect experiment, electrons are ejected from a titanium surface (work function Phi = 433mathrmeV) following irradition with UV light. The energy of the incident UV light is 72 cdot 10^-19 mathrmJ per photon. Calculate the wavelength of the ejected electrons, in nanometers.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Let's solve this problem with DynamicQuantities.jl!","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> using DynamicQuantities\n\njulia> using DynamicQuantities.Constants: h, m_e\n\njulia> Φ = 4.33u\"Constants.eV\" # work function\n6.93742482522e-19 m² kg s⁻²\n\njulia> E = 7.2e-19u\"J\" # incident energy\n7.2e-19 m² kg s⁻²\n\njulia> p = sqrt(2 * m_e * (E - Φ)) # momentum of ejected electrons\n2.1871890716439906e-25 m kg s⁻¹\n\njulia> λ = h / p # wavelength of ejected electrons\n3.029491247878056e-9 m\n\njulia> λ |> us\"nm\" # return answer in nanometers (equivalent to `uconvert(us\"nm\", λ)`)\n3.0294912478780556 nm","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Since units are automatically propagated, we can verify the dimension of our answer and all intermediates. Also, using DynamicQuantities.Constants, we were able to obtain the (dimensionful!) values of all necessary constants without typing them ourselves.","category":"page"},{"location":"examples/#2.-Projectile-motion","page":"Examples","title":"2. Projectile motion","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Let's solve a simple projectile motion problem. First load the DynamicQuantities module:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DynamicQuantities","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Set up initial conditions as quantities:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Can explicitly import units:\nusing DynamicQuantities: km, m, s, min\n\ny0 = 10km\nv0 = 250m/s\nθ = deg2rad(60)\ng = 9.81m/s^2","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Next, we use trig functions to calculate x and y components of initial velocity. vx0 is the x component and vy0 is the y component:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"vx0 = v0 * cos(θ)\nvy0 = v0 * sin(θ)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Next, let's create a time vector from 0 seconds to 1.3 minutes. Note that these are the same dimension (time), so it's fine to treat them as dimensionally equivalent!","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"t = range(0s, 1.3min, length=100)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Next, use kinematic equations to calculate x and y as a function of time. x(t) is the x position at time t, and y(t) is the y position:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"x(t) = vx0*t\ny(t) = vy0*t - 0.5*g*t^2 + y0","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"These are functions, so let's evaluate them:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"x_si = x.(t)\ny_si = y.(t)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"These are regular vectors of quantities with Dimensions for physical dimensions.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Next, let's plot the trajectory. First convert to km and strip units:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"x_km = ustrip.(x_si .|> us\"km\")\ny_km = ustrip.(y_si .|> us\"km\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now, we plot:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"plot(x_km, y_km, label=\"Trajectory\", xlabel=\"x [km]\", ylabel=\"y [km]\")","category":"page"},{"location":"examples/#3.-Using-dimensional-angles","page":"Examples","title":"3. Using dimensional angles","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Say that we wish to track angles as a unit, rather than assume the SI convention that 1 rad = 1. We can do this by creating a new struct to track dimensions:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DynamicQuantities\n\nstruct AngleDimensions{R} <: AbstractDimensions{R}\n    length::R\n    mass::R\n    time::R\n    current::R\n    temperature::R\n    luminosity::R\n    amount::R\n    angle::R\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Simply by inheriting from AbstractDimensions, we get all the constructors and operations as defined on Dimensions:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> x = Quantity(1.0, AngleDimensions(length=1, angle=-1))\n1.0 m angle⁻¹","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"However, perhaps we want to set the default angle dimension as rad. We can do this by defining a method for dimension_name:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"import DynamicQuantities: DynamicQuantities as DQ\n\nfunction DQ.dimension_name(::AngleDimensions, k::Symbol)\n    default_dimensions = (\n        length = \"m\",\n        mass = \"kg\",\n        time = \"s\",\n        current = \"A\",\n        temperature = \"K\",\n        luminosity = \"cd\",\n        amount = \"mol\",\n        angle = \"rad\",\n    )\n    return get(default_dimensions, k, string(k))\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This gives us the following behavior:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> x = Quantity(1.0, AngleDimensions(length=1, angle=-1))\n1.0 m rad⁻¹","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Next, say that we are working with existing quantities defined using standard Dimensions. We want to promote these to our new AngleDimensions type.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For this, we define two functions: promote_rule and a constructor for AngleDimensions from regular Dimensions:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"function Base.promote_rule(::Type{AngleDimensions{R1}}, ::Type{Dimensions{R2}}) where {R1,R2}\n    return AngleDimensions{promote_type(R1, R2)}\nend\nfunction Base.convert(::Type{Quantity{T,AngleDimensions{R}}}, q::Quantity{<:Any,<:Dimensions}) where {T,Din,R}\n    val = ustrip(q)\n    d = dimension(q)\n    return Quantity(\n        T(val),\n        AngleDimensions{R}(;\n            d.length, d.mass, d.time, d.current, d.temperature, d.luminosity, d.amount, angle=zero(R)\n        )\n    )\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This means that whenever a Quantity{<:Any,<:Dimensions} interacts with a Quantity{<:Any,<:AngleDimensions}, the result will be a Quantity{<:Any,<:AngleDimensions}, and we will initialize the angle dimension to 0. (Code not given for SymbolicDimensions; you will probably want to treat the angles in symbolic units explicitly, so that us\"rad\" is correctly tracked.)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Let's define a constant for rad:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> const rad = Quantity(1.0, AngleDimensions(angle = 1))\n1.0 rad","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"and use it in a calculation:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> x = 2rad\n2.0 rad\n\njulia> y = 10u\"min\"\n600.0 s\n\njulia> angular_velocity = x / y\n0.0033333333333333335 s⁻¹ rad","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"which as we can see, automatically promotes to AngleDimensions.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"However, note the following: If existing code uses rad as a unit without tracking it with AngleDimensions, you will need to explicitly add the missing dimensions. For this reason, if you decide to take this approach to tracking units, you probably want to use AngleDimensions throughout your codebase, rather than mixing them.","category":"page"},{"location":"examples/#4.-Assorted-examples","page":"Examples","title":"4. Assorted examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This section demonstrates miscellaneous examples of using DynamicQuantities.jl.","category":"page"},{"location":"examples/#Conversion","page":"Examples","title":"Conversion","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Convert a quantity to have a new type for the value:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"quantity = 1.5u\"m\"\n\nconvert_q = Quantity{Float32}(quantity)\n\nprintln(\"Converted Quantity to Float32: \", convert_q)","category":"page"},{"location":"examples/#Array-basics","page":"Examples","title":"Array basics","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Create a QuantityArray (an array of quantities with the same dimension) by passing an array and a single quantity:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"x = QuantityArray(randn(32), u\"km/s\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"or, by passing an array of individual quantities:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"y = randn(32)\ny_q = QuantityArray(y .* u\"m * cd / s\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can take advantage of this being <:AbstractArray:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"println(\"Sum x: \", sum(x))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can also do things like setting a particular element:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"y_q[5] = Quantity(5, length=1, luminosity=1, time=-1)\nprintln(\"5th element of y_q: \", y_q[5])","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can get back the original array with ustrip:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"println(\"Stripped y_q: \", ustrip(y_q))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This QuantityArray is useful for broadcasting:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"f_square(v) = v^2 * 1.5 - v^2\nprintln(\"Applying function to y_q: \", sum(f_square.(y_q)))","category":"page"},{"location":"examples/#Fill","page":"Examples","title":"Fill","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can also make QuantityArray using fill:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"filled_q = fill(u\"m/s\", 10)\nprintln(\"Filled QuantityArray: \", filled_q)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"fill works for 0 dimensional QuantityArrays as well:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"empty_q = fill(u\"m/s\", ())\nprintln(\"0 dimensional QuantityArray: \", empty_q)","category":"page"},{"location":"examples/#Similar","page":"Examples","title":"Similar","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Likewise, we can create a QuantityArray with the same properties as another QuantityArray:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"qa = QuantityArray(rand(3, 4), u\"m\")\n\nnew_qa = similar(qa)\n\nprintln(\"Similar qa: \", new_qa)","category":"page"},{"location":"examples/#Promotion","page":"Examples","title":"Promotion","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Promotion rules are defined for QuantityArrays:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"qarr1 = QuantityArray(randn(32), convert(Dimensions{Rational{Int32}}, dimension(u\"km/s\")))\nqarr2 = QuantityArray(randn(Float16, 32), convert(Dimensions{Rational{Int64}}, dimension(u\"km/s\")))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"See what type they promote to:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"println(\"Promoted type: \", typeof(promote(qarr1, qarr2)))","category":"page"},{"location":"examples/#Array-Concatenation","page":"Examples","title":"Array Concatenation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Likewise, we can take advantage of array concatenation, which will ensure we have the same dimensions:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"qarr1 = QuantityArray(randn(3) .* u\"km/s\")\nqarr2 = QuantityArray(randn(3) .* u\"km/s\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Concatenate them:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"concat_qarr = hcat(qarr1, qarr2)\nprintln(\"Concatenated QuantityArray: \", concat_qarr)","category":"page"},{"location":"examples/#Symbolic-Units","page":"Examples","title":"Symbolic Units","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can use arbitrary AbstractQuantity and AbstractDimensions in a QuantityArray, including SymbolicDimensions:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"z_ar = randn(32)\nz = QuantityArray(z_ar, us\"Constants.M_sun * km/s\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Expand to standard units:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"z_expanded = uexpand(z)\nprintln(\"Expanded z: \", z_expanded)","category":"page"},{"location":"examples/#GenericQuantity-Construction","page":"Examples","title":"GenericQuantity Construction","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In addition to Quantity, we can also use GenericQuantity:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"x = GenericQuantity(1.5)\ny = GenericQuantity(0.2u\"km\")\nprintln(y)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This GenericQuantity is subtyped to Any, rather than Number, and thus can also store custom non-scalar types.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For example, we can work with Coords, and wrap it in a single GenericQuantity type:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"struct Coords\n    x::Float64\n    y::Float64\nend\n\n# Define arithmetic operations on Coords\nBase.:+(a::Coords, b::Coords) = Coords(a.x + b.x, a.y + b.y)\nBase.:-(a::Coords, b::Coords) = Coords(a.x - b.x, a.y - b.y)\nBase.:*(a::Coords, b::Number) = Coords(a.x * b, a.y * b)\nBase.:*(a::Number, b::Coords) = Coords(a * b.x, a * b.y)\nBase.:/(a::Coords, b::Number) = Coords(a.x / b, a.y / b)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can then build a GenericQuantity out of this:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"coord1 = GenericQuantity(Coords(0.3, 0.9), length=1)\ncoord2 = GenericQuantity(Coords(0.2, -0.1), length=1)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"and perform operations on these:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"coord1 + coord2 |> us\"cm\"\n# (Coords(50.0, 80.0)) cm","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The nice part about this is it only stores a single Dimensions (or SymbolicDimensions) for the entire struct!","category":"page"},{"location":"examples/#GenericQuantity-and-Quantity-Promotion","page":"Examples","title":"GenericQuantity and Quantity Promotion","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"When we combine a GenericQuantity and a Quantity, the result is another GenericQuantity:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"x = GenericQuantity(1.5f0)\ny = Quantity(1.5, length=1)\nprintln(\"Promoted type of x and y: \", typeof(x * y))","category":"page"},{"location":"examples/#Custom-Dimensions","page":"Examples","title":"Custom Dimensions","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can create custom dimensions by subtyping to AbstractDimensions:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"struct MyDimensions{R} <: AbstractDimensions{R}\n    cookie::R\n    milk::R\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Many constructors and functions are defined on AbstractDimensions, so this can be used out-of-the-box. We can then use this in a Quantity, and all operations will work as expected:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"x = Quantity(1.5, MyDimensions(cookie=1, milk=-1))\ny = Quantity(2.0, MyDimensions(milk=1))\n\nx * y","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"which gives us 3.0 cookie computed from a rate of 1.5 cookie milk⁻¹ multiplied by 2.0 milk. Likewise, we can use these in a QuantityArray:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"x_qa = QuantityArray(randn(32), MyDimensions(cookie=1, milk=-1))\n\nx_qa .^ 2","category":"page"},{"location":"examples/#Custom-Quantities","page":"Examples","title":"Custom Quantities","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can also create custom dimensions by subtyping to either AbstractQuantity (for <:Number) or AbstractGenericQuantity (for <:Any):","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"struct MyQuantity{T,D} <: AbstractQuantity{T,D}\n    value::T\n    dimensions::D\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Since AbstractQuantity <: Number, this will also be a number. Keep in mind that you must call these fields value and dimensions for ustrip(...) and dimension(...) to work. Otherwise, simply redefine those.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can use this custom quantity just like we would use Quantity:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"q1 = MyQuantity(1.2, Dimensions(length=-2))\n# prints as `1.2 m⁻²`\n\nq2 = MyQuantity(1.5, MyDimensions(cookie=1))\n# prints as `1.5 cookie`","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Including mathematical operations:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"q2 ^ 2\n# `2.25 cookie²`","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The main reason you would use a custom quantity is if you want to change built-in behavior, or maybe have special methods for different types of quantities.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note that you can declare a method on AbstractQuantity, or AbstractGenericQuantity to allow their respective inputs.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note: In general, you should probably specialize on UnionAbstractQuantity which is the union of these two abstract quantities, as well as any other future abstract quantity types, such as the planned AbstractRealQuantity.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"function my_func(x::UnionAbstractQuantity{T,D}) where {T,D}\n    # value has type T and dimensions has type D\n    return x / ustrip(x)\nend","category":"page"},{"location":"units/#Units","page":"Units","title":"Units","text":"","category":"section"},{"location":"units/","page":"Units","title":"Units","text":"The two main functions for working with units are uparse and u_str:","category":"page"},{"location":"units/","page":"Units","title":"Units","text":"@u_str\nuparse","category":"page"},{"location":"units/#DynamicQuantities.UnitsParse.@u_str","page":"Units","title":"DynamicQuantities.UnitsParse.@u_str","text":"u\"[unit expression]\"\n\nParse a string containing an expression of units and return the corresponding Quantity object with Float64 value. For example, u\"km/s^2\" would be parsed to Quantity(1000.0, length=1, time=-2).\n\nNote that inside this expression, you also have access to the Constants module. So, for example, u\"Constants.c^2 * Hz^2\" would evaluate to the quantity corresponding to the speed of light multiplied by Hertz, squared.\n\n\n\n\n\n","category":"macro"},{"location":"units/#DynamicQuantities.UnitsParse.uparse","page":"Units","title":"DynamicQuantities.UnitsParse.uparse","text":"uparse(s::AbstractString)\n\nParse a string containing an expression of units and return the corresponding Quantity object with Float64 value. For example, uparse(\"m/s\") would be parsed to Quantity(1.0, length=1, time=-1).\n\nNote that inside this expression, you also have access to the Constants module. So, for example, uparse(\"Constants.c^2 * Hz^2\") would evaluate to the quantity corresponding to the speed of light multiplied by Hertz, squared.\n\n\n\n\n\n","category":"function"},{"location":"units/#Available-units","page":"Units","title":"Available units","text":"","category":"section"},{"location":"units/","page":"Units","title":"Units","text":"The base SI units are as follows. You can either use the @u_str macro like 1.5u\"m\", or simply import these explicitly from the package with using DynamicQuantities: m.","category":"page"},{"location":"units/","page":"Units","title":"Units","text":"Units.m\nUnits.kg\nUnits.s\nUnits.A\nUnits.K\nUnits.cd\nUnits.mol","category":"page"},{"location":"units/#DynamicQuantities.Units.m","page":"Units","title":"DynamicQuantities.Units.m","text":"Length in meters. Available variants: fm, pm, nm, μm (/um), cm, inch, dm, mm, ft, km, mi, Mm, Gm.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.kg","page":"Units","title":"DynamicQuantities.Units.kg","text":"Mass in kilograms. Available variants: pg, ng, μg (/ug), mg, g.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.s","page":"Units","title":"DynamicQuantities.Units.s","text":"Time in seconds. Available variants: fs, ps, ns, μs (/us), ms, min (/minute), h (/hr), day (/d), wk, yr, kyr, Myr, Gyr.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.A","page":"Units","title":"DynamicQuantities.Units.A","text":"Current in Amperes. Available variants: nA, μA (/uA), mA, kA.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.K","page":"Units","title":"DynamicQuantities.Units.K","text":"Temperature in Kelvin. Available variant: mK.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.cd","page":"Units","title":"DynamicQuantities.Units.cd","text":"Luminosity in candela. Available variant: mcd.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.mol","page":"Units","title":"DynamicQuantities.Units.mol","text":"Amount in moles. Available variant: pmol, nmol, μmol (/umol), mmol.\n\n\n\n\n\n","category":"constant"},{"location":"units/#Derived-units","page":"Units","title":"Derived units","text":"","category":"section"},{"location":"units/","page":"Units","title":"Units","text":"Several derived SI units are available as well:","category":"page"},{"location":"units/","page":"Units","title":"Units","text":"Modules = [Units]\nOrder = [:constant]\nFilter = t -> t ∉ (Units.m, Units.kg, Units.s, Units.A, Units.K, Units.cd, Units.mol)","category":"page"},{"location":"units/#DynamicQuantities.Units.C","page":"Units","title":"DynamicQuantities.Units.C","text":"Charge in Coulombs.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.F","page":"Units","title":"DynamicQuantities.Units.F","text":"Capacitance in Farads. Available variants: fF, pF, nF, μF (/uF), mF.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.H","page":"Units","title":"DynamicQuantities.Units.H","text":"Electrical inductance in henries.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.Hz","page":"Units","title":"DynamicQuantities.Units.Hz","text":"Frequency in Hertz. Available variants: nHz, μHz (/uHz), mHz, kHz, MHz, GHz.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.J","page":"Units","title":"DynamicQuantities.Units.J","text":"Energy in Joules. Available variant: kJ.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.L","page":"Units","title":"DynamicQuantities.Units.L","text":"Volume in liters. Available variants: μL (/uL), mL, cL, dL.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.M","page":"Units","title":"DynamicQuantities.Units.M","text":"Molar concentration in molar. Available variants: pM, nM, μM (/uM), mM.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.N","page":"Units","title":"DynamicQuantities.Units.N","text":"Force in Newtons. Available variants: μN (/uN), mN, kN.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.Pa","page":"Units","title":"DynamicQuantities.Units.Pa","text":"Pressure in Pascals. Available variant: kPa.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.S","page":"Units","title":"DynamicQuantities.Units.S","text":"Electrical conductance, electric susceptance, and electric admittance in siemens. Available variants: nS, μS (/uS), mS, kS, MS, GS.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.T","page":"Units","title":"DynamicQuantities.Units.T","text":"Magnetic flux density in Teslas. Available variants: Gauss\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.Torr","page":"Units","title":"DynamicQuantities.Units.Torr","text":"Pressure in Torr. Available variants: mTorr.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.V","page":"Units","title":"DynamicQuantities.Units.V","text":"Voltage in Volts. Available variants: pV, nV, μV (/uV), mV, kV,MV,GV`.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.W","page":"Units","title":"DynamicQuantities.Units.W","text":"Power in Watts. Available variants: mW, kW, MW, GW.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.Wb","page":"Units","title":"DynamicQuantities.Units.Wb","text":"Magnetic flux in webers. Available variants: nWb, μWb (/uWb), mWb.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.bar","page":"Units","title":"DynamicQuantities.Units.bar","text":"Pressure in bars. Available variants: mbar.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.mmHg","page":"Units","title":"DynamicQuantities.Units.mmHg","text":"Pressure in mmHg.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.rad","page":"Units","title":"DynamicQuantities.Units.rad","text":"Angle in radians. Note that the SI definition is simply 1 rad = 1, so use symbolic units to avoid this. Available variants: nrad, μrad (/urad), mrad, deg, arcmin, arcsec, μarcsec (/uarcsec), marcsec.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.sr","page":"Units","title":"DynamicQuantities.Units.sr","text":"Solid angle in steradians. Note that the SI definition is simply 1 sr = 1, so use symbolic units to avoid this.\n\n\n\n\n\n","category":"constant"},{"location":"units/#DynamicQuantities.Units.Ω","page":"Units","title":"DynamicQuantities.Units.Ω","text":"Resistance in Ohms. Available variant: nΩ, μΩ (/uΩ), mΩ, kΩ, MΩ, GΩ. Also available is ASCII ohm (with variants nohm, μohm (/uohm), mohm, kohm, Mohm, Gohm).\n\n\n\n\n\n","category":"constant"},{"location":"units/#Custom-Units","page":"Units","title":"Custom Units","text":"","category":"section"},{"location":"units/","page":"Units","title":"Units","text":"You can define custom units with the @register_unit macro:","category":"page"},{"location":"units/","page":"Units","title":"Units","text":"@register_unit","category":"page"},{"location":"units/#DynamicQuantities.@register_unit","page":"Units","title":"DynamicQuantities.@register_unit","text":"@register_unit symbol value\n\nRegister a new unit under the given symbol to have a particular value.\n\nExample\n\njulia> @register_unit MyVolt 1.5u\"V\"\n\nThis will register a new unit MyVolt with a value of 1.5u\"V\". You can then use this unit in your calculations:\n\njulia> x = 20us\"MyVolt^2\"\n20.0 MyVolt²\n\njulia> y = 2.5us\"A\"\n2.5 A\n\njulia> x * y^2 |> us\"W^2\"\n281.25 W²\n\njulia> x * y^2 |> us\"W^2\" |> sqrt |> uexpand\n16.77050983124842 m² kg s⁻³\n\n\n\n\n\n","category":"macro"},{"location":"symbolic_units/#Symbolic-Dimensions","page":"Symbolic Units","title":"Symbolic Dimensions","text":"","category":"section"},{"location":"symbolic_units/","page":"Symbolic Units","title":"Symbolic Units","text":"Whereas u\"...\" will automatically convert all units to the same base SI units, us\"...\" will not. This uses the SymbolicDimensions type, which is a subtype of AbstractDimensions that stores the dimensions symbolically. This is useful for keeping track of the original units and constants in a user-entered expression.","category":"page"},{"location":"symbolic_units/","page":"Symbolic Units","title":"Symbolic Units","text":"The two main functions for working with symbolic units are sym_uparse and us_str:","category":"page"},{"location":"symbolic_units/","page":"Symbolic Units","title":"Symbolic Units","text":"@us_str\nsym_uparse","category":"page"},{"location":"symbolic_units/#DynamicQuantities.@us_str","page":"Symbolic Units","title":"DynamicQuantities.@us_str","text":"us\"[unit expression]\"\n\nParse a string containing an expression of units and return the corresponding Quantity object with Float64 value. However, unlike the regular u\"...\" macro, this macro uses SymbolicDimensions for the dimension type, which means that all units and constants are stored symbolically and will not automatically expand to SI units. For example, us\"km/s^2\" would be parsed to Quantity(1.0, SymbolicDimensions, km=1, s=-2).\n\nNote that inside this expression, you also have access to the Constants module. So, for example, us\"Constants.c^2 * Hz^2\" would evaluate to Quantity(1.0, SymbolicDimensions, c=2, Hz=2). However, note that due to namespace collisions, a few physical constants are automatically converted.\n\n\n\n\n\n","category":"macro"},{"location":"symbolic_units/#DynamicQuantities.SymbolicUnits.sym_uparse","page":"Symbolic Units","title":"DynamicQuantities.SymbolicUnits.sym_uparse","text":"sym_uparse(raw_string::AbstractString)\n\nParse a string containing an expression of units and return the corresponding Quantity object with Float64 value. However, that unlike the regular u\"...\" macro, this macro uses SymbolicDimensions for the dimension type, which means that all units and constants are stored symbolically and will not automatically expand to SI units. For example, sym_uparse(\"km/s^2\") would be parsed to Quantity(1.0, SymbolicDimensions, km=1, s=-2).\n\nNote that inside this expression, you also have access to the Constants module. So, for example, sym_uparse(\"Constants.c^2 * Hz^2\") would evaluate to Quantity(1.0, SymbolicDimensions, c=2, Hz=2). However, note that due to namespace collisions, a few physical constants are automatically converted.\n\n\n\n\n\n","category":"function"},{"location":"symbolic_units/","page":"Symbolic Units","title":"Symbolic Units","text":"You can also access these from the exported modules SymbolicUnits for the units and SymbolicConstants. The same units and constants are available as for u\"...\", simply in the symbolic form.","category":"page"},{"location":"symbolic_units/","page":"Symbolic Units","title":"Symbolic Units","text":"To convert a quantity to its regular base SI units, use uexpand:","category":"page"},{"location":"symbolic_units/","page":"Symbolic Units","title":"Symbolic Units","text":"uexpand","category":"page"},{"location":"symbolic_units/#DynamicQuantities.uexpand","page":"Symbolic Units","title":"DynamicQuantities.uexpand","text":"uexpand(q::UnionAbstractQuantity{<:Any,<:AbstractSymbolicDimensions})\n\nExpand the symbolic units in a quantity to their base SI form. In other words, this converts a quantity with AbstractSymbolicDimensions to one with Dimensions. The opposite of this function is uconvert, for converting to specific symbolic units, or, e.g., convert(Quantity{<:Any,<:AbstractSymbolicDimensions}, q), for assuming SI units as the output symbols.\n\n\n\n\n\n","category":"function"},{"location":"symbolic_units/","page":"Symbolic Units","title":"Symbolic Units","text":"To convert a quantity in regular base SI units to corresponding symbolic units, use uconvert:","category":"page"},{"location":"symbolic_units/","page":"Symbolic Units","title":"Symbolic Units","text":"uconvert","category":"page"},{"location":"symbolic_units/#DynamicQuantities.uconvert","page":"Symbolic Units","title":"DynamicQuantities.uconvert","text":"uconvert(qout::UnionAbstractQuantity{<:Any, <:AbstractSymbolicDimensions}, q::UnionAbstractQuantity{<:Any, <:Dimensions})\n\nConvert a quantity q with base SI units to the symbolic units of qout, for q and qout with compatible units. Mathematically, the result has value q / uexpand(qout) and units dimension(qout).\n\nYou can also use |> as a shorthand for uconvert:\n\njulia> q = 1u\"m/s^2\" |> us\"km/h^2\"\n12960.0 km h⁻²\n\n\n\n\n\nuconvert(qout::UnionAbstractQuantity{<:Any, <:AbstractSymbolicDimensions})\n\nCreate a function that converts an input quantity q with base SI units to the symbolic units of qout, i.e a function equivalent to q -> uconvert(qout, q).\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Dev) (Image: Build Status) (Image: Coverage) (Image: Aqua QA)","category":"page"},{"location":"","page":"Home","title":"Home","text":"DynamicQuantities defines a simple statically-typed Quantity type for Julia. Physical dimensions are stored as a value, as opposed to a parametric type, as in Unitful.jl. This can greatly improve both runtime performance, by avoiding type instabilities, and startup time, as it avoids overspecializing methods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Performance\nUsage\nConstants\nSymbolic Units\nArrays\nUnitful\nTypes\nVectors","category":"page"},{"location":"#Performance","page":"Home","title":"Performance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DynamicQuantities can greatly outperform Unitful when the compiler cannot infer dimensions in a function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using BenchmarkTools, DynamicQuantities; import Unitful\n\njulia> dyn_uni = 0.2u\"m/s\"\n0.2 m s⁻¹\n\njulia> unitful = convert(Unitful.Quantity, dyn_uni)\n0.2 m s⁻¹\n\njulia> f(x, i) = x ^ i * 0.3;\n\njulia> @btime f($dyn_uni, 1);\n  2.708 ns (0 allocations: 0 bytes)\n\njulia> @btime f($unitful, 1);\n  2.597 μs (30 allocations: 1.33 KiB)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note the μ and n: this is a 1000x speedup! Here, the DynamicQuantities quantity object allows the compiler to build a function that is type stable, while the Unitful quantity object, which stores its dimensions in the type, requires type inference at runtime.","category":"page"},{"location":"","page":"Home","title":"Home","text":"However, if the dimensions in your function can be inferred by the compiler, then you can get better speeds with Unitful:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> g(x) = x ^ 2 * 0.3;\n\njulia> @btime g($dyn_uni);\n  1.791 ns (0 allocations: 0 bytes)\n\njulia> @btime g($unitful);\n  1.500 ns (0 allocations: 0 bytes)","category":"page"},{"location":"","page":"Home","title":"Home","text":"While both of these are type stable, because Unitful parametrizes the type on the dimensions, functions can specialize to units and the compiler can optimize away units from the code.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can create a Quantity object  by using the convenience macro u\"...\":","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> x = 0.3u\"km/s\"\n300.0 m s⁻¹\n\njulia> y = 42 * u\"kg\"\n42.0 kg","category":"page"},{"location":"","page":"Home","title":"Home","text":"or by importing explicitly:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using DynamicQuantities: kPa\n\njulia> room_temp = 100kPa\n100000.0 m⁻¹ kg s⁻²","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that Units is an exported submodule, so you can also access this as Units.kPa. You may like to define","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> const U = Units","category":"page"},{"location":"","page":"Home","title":"Home","text":"so that you can simply write, say, U.kPa or C.m_e.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This supports a wide range of SI base and derived units, with common prefixes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also construct values explicitly with the Quantity type, with a value and keyword arguments for the powers of the physical dimensions (mass, length, time, current, temperature, luminosity, amount):","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> x = Quantity(300.0, length=1, time=-1)\n300.0 m s⁻¹","category":"page"},{"location":"","page":"Home","title":"Home","text":"Elementary calculations with +, -, *, /, ^, sqrt, cbrt, abs are supported:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> x * y\n12600.0 m kg s⁻¹\n\njulia> x / y\n7.142857142857143 m kg⁻¹ s⁻¹\n\njulia> x ^ 3\n2.7e7 m³ s⁻³\n\njulia> x ^ -1\n0.0033333333333333335 m⁻¹ s\n\njulia> sqrt(x)\n17.320508075688775 m¹ᐟ² s⁻¹ᐟ²\n\njulia> x ^ 1.5\n5196.152422706632 m³ᐟ² s⁻³ᐟ²","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each of these values has the same type, which means we don't need to perform type inference at runtime.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Furthermore, we can do dimensional analysis by detecting DimensionError:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> x + 3 * x\n1.2 m¹ᐟ² kg\n\njulia> x + y\nERROR: DimensionError: 0.3 m¹ᐟ² kg and 10.2 kg² s⁻² have incompatible dimensions","category":"page"},{"location":"","page":"Home","title":"Home","text":"The dimensions of a Quantity can be accessed either with dimension(quantity) for the entire Dimensions object:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> dimension(x)\nm¹ᐟ² kg","category":"page"},{"location":"","page":"Home","title":"Home","text":"or with umass, ulength, etc., for the various dimensions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> umass(x)\n1//1\n\njulia> ulength(x)\n1//2","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, you can strip units with ustrip:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ustrip(x)\n0.2","category":"page"},{"location":"#Constants","page":"Home","title":"Constants","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are a variety of physical constants accessible via the Constants submodule:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> Constants.c\n2.99792458e8 m s⁻¹","category":"page"},{"location":"","page":"Home","title":"Home","text":"which you may like to define as","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> const C = Constants","category":"page"},{"location":"","page":"Home","title":"Home","text":"These can also be used inside the u\"...\" macro:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> u\"Constants.c * Hz\"\n2.99792458e8 m s⁻²","category":"page"},{"location":"","page":"Home","title":"Home","text":"Similarly, you can just import each individual constant:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using DynamicQuantities.Constants: h","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the full list, see the docs.","category":"page"},{"location":"#Symbolic-Units","page":"Home","title":"Symbolic Units","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can also choose to not eagerly convert to SI base units, instead leaving the units as the user had written them. For example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> q = 100us\"cm * kPa\"\n100.0 cm kPa\n\njulia> q^2\n10000.0 cm² kPa²","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can convert to regular SI base units with uexpand:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> uexpand(q^2)\n1.0e6 kg² s⁻⁴","category":"page"},{"location":"","page":"Home","title":"Home","text":"This also works with constants:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> x = us\"Constants.c * Hz\"\n1.0 Hz c\n\njulia> x^2\n1.0 Hz² c²\n\njulia> uexpand(x^2)\n8.987551787368176e16 m² s⁻⁴","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also convert a quantity in regular base SI units to symbolic units with the |> infix operator","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> 5e-9u\"m\" |> us\"nm\"\n5.0 nm","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also convert between different symbolic units. (Note that you can write this more explicitly with uconvert(us\"nm\", 5e-9u\"m\").)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, you can also import these directly:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using DynamicQuantities.SymbolicUnits: cm","category":"page"},{"location":"","page":"Home","title":"Home","text":"or constants:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using DynamicQuantities.SymbolicConstants: h","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that SymbolicUnits and SymbolicConstants are exported, so you can simply access these as SymbolicUnits.cm and SymbolicConstants.h, respectively.","category":"page"},{"location":"#Custom-Units","page":"Home","title":"Custom Units","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can create custom units with the @register_unit macro:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @register_unit OneFiveV 1.5u\"V\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"and then use it in calculations normally:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> x = us\"OneFiveV\"\n1.0 OneFiveV\n\njulia> x * 10u\"A\" |> us\"W\"\n15.0 W\n\njulia> 3us\"V\" |> us\"OneFiveV\"\n2.0 OneFiveV","category":"page"},{"location":"#Arrays","page":"Home","title":"Arrays","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For working with an array of quantities that have the same dimensions, you can use a QuantityArray:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ar = QuantityArray(rand(3), u\"m/s\")\n3-element QuantityArray(::Vector{Float64}, ::Quantity{Float64, Dimensions{FixedRational{Int32, 25200}}}):\n 0.2729202669351497 m s⁻¹\n 0.992546340360901 m s⁻¹\n 0.16863543422972482 m s⁻¹","category":"page"},{"location":"","page":"Home","title":"Home","text":"This QuantityArray is a subtype <:AbstractArray{Quantity{Float64,Dimensions{...}},1}, meaning that indexing a specific element will return a Quantity:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ar[2]\n0.992546340360901 m s⁻¹\n\njulia> ar[2] *= 2\n1.985092680721802 m s⁻¹\n\njulia> ar[2] += 0.5u\"m/s\"\n2.485092680721802 m s⁻¹","category":"page"},{"location":"","page":"Home","title":"Home","text":"This also has a custom broadcasting interface which allows the compiler to avoid redundant dimension calculations, relative to if you had simply used an array of quantities:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> f(v) = v^2 * 1.5;\n\njulia> @btime $f.(xa) setup=(xa = randn(100000) .* u\"km/s\");\n  109.500 μs (2 allocations: 3.81 MiB)\n\njulia> @btime $f.(qa) setup=(xa = randn(100000) .* u\"km/s\"; qa = QuantityArray(xa));\n  50.917 μs (3 allocations: 781.34 KiB)","category":"page"},{"location":"","page":"Home","title":"Home","text":"So we can see the QuantityArray version saves on both time and memory.","category":"page"},{"location":"#Unitful","page":"Home","title":"Unitful","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DynamicQuantities allows you to convert back and forth from Unitful.jl:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Unitful: Unitful, @u_str; import DynamicQuantities\n\njulia> x = 0.5u\"km/s\"\n0.5 km s⁻¹\n\njulia> y = convert(DynamicQuantities.Quantity, x)\n500.0 m s⁻¹\n\njulia> y2 = y^2 * 0.3\n75000.0 m² s⁻²\n\njulia> x2 = convert(Unitful.Quantity, y2)\n75000.0 m² s⁻²\n\njulia> x^2*0.3 == x2\ntrue","category":"page"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Both a Quantity's values and dimensions are of arbitrary type. The default Dimensions (for the u\"...\" macro) performs exponent tracking for SI units, and SymbolicDimensions (for the us\"...\" macro) performs exponent tracking for all known unit and constant symbols, using a sparse array.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can create custom spaces dimension spaces by simply creating a Julia struct subtyped to AbstractDimensions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> struct CookiesAndMilk{R} <: AbstractDimensions{R}\n           cookies::R\n           milk::R\n       end\n\njulia> cookie_rate = Quantity(0.9, CookiesAndMilk(cookies=1, milk=-1))\n0.9 cookies milk⁻¹\n\njulia> total_milk = Quantity(103, CookiesAndMilk(milk=1))\n103 milk\n\njulia> total_cookies = cookie_rate * total_milk\n92.7 cookies","category":"page"},{"location":"","page":"Home","title":"Home","text":"Exponents are tracked by default with the type R = FixedRational{Int32,C}, which represents rational numbers with a fixed denominator C. This is much faster than Rational.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> typeof(0.5u\"kg\")\nQuantity{Float64, Dimensions{FixedRational{Int32, 25200}}}","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can change the type of the value field by initializing with a value explicitly of the desired type.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> typeof(Quantity(Float16(0.5), mass=1, length=1))\nQuantity{Float16, Dimensions{FixedRational{Int32, 25200}}}","category":"page"},{"location":"","page":"Home","title":"Home","text":"or by conversion:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> typeof(convert(Quantity{Float16}, 0.5u\"m/s\"))\nQuantity{Float16, Dimensions{FixedRational{Int32, 25200}}}","category":"page"},{"location":"","page":"Home","title":"Home","text":"For many applications, FixedRational{Int8,6} will suffice, and can be faster as it means the entire Dimensions struct will fit into 64 bits. You can change the type of the dimensions field by passing the type you wish to use as the second argument to Quantity:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using DynamicQuantities\n\njulia> R8 = Dimensions{FixedRational{Int8,6}};\n\njulia> R32 = Dimensions{FixedRational{Int32,2^4 * 3^2 * 5^2 * 7}};  # Default\n\njulia> q8 = [Quantity{Float64,R8}(randn(), length=rand(-2:2)) for i in 1:1000];\n\njulia> q32 = [Quantity{Float64,R32}(randn(), length=rand(-2:2)) for i in 1:1000];\n\njulia> f(x) = @. x ^ 2 * 0.5;\n\njulia> @btime f($q8);\n  1.433 μs (3 allocations: 15.77 KiB)\n\njulia> @btime f($q32);\n  1.883 μs (4 allocations: 39.12 KiB)","category":"page"},{"location":"types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Quantity\nDimensions","category":"page"},{"location":"types/#DynamicQuantities.Quantity","page":"Types","title":"DynamicQuantities.Quantity","text":"Quantity{T<:Number,D<:AbstractDimensions} <: AbstractQuantity{T,D} <: Number\n\nPhysical quantity with value value of type T and dimensions dimensions of type D. For example, the velocity of an object with mass 1 kg and velocity 2 m/s is Quantity(2, mass=1, length=1, time=-1). You should access these fields with ustrip(q), and dimension(q). You can access specific dimensions with ulength(q), umass(q), utime(q), ucurrent(q), utemperature(q), uluminosity(q), and uamount(q).\n\nSeverals operators in Base are extended to work with Quantity objects, including *, +, -, /, abs, ^, sqrt, and cbrt, which manipulate dimensions according to the operation.\n\nFields\n\nvalue::T: value of the quantity of some type T. Access with ustrip(::Quantity)\ndimensions::D: dimensions of the quantity. Access with dimension(::Quantity)\n\nConstructors\n\nQuantity(x; kws...): Construct a quantity with value x and dimensions given by the keyword arguments. The value  type is inferred from x. R is set to DEFAULT_DIM_TYPE.\nQuantity(x, ::Type{D}; kws...): Construct a quantity with value x with dimensions given by the keyword arguments,  and the dimensions type set to D.\nQuantity(x, d::D): Construct a quantity with value x and dimensions d of type D.\nQuantity{T}(...): As above, but converting the value to type T. You may also pass a Quantity as input.\nQuantity{T,D}(...): As above, but converting the value to type T and dimensions to D. You may also pass a Quantity as input.\n\n\n\n\n\n","category":"type"},{"location":"types/#DynamicQuantities.Dimensions","page":"Types","title":"DynamicQuantities.Dimensions","text":"Dimensions{R<:Real} <: AbstractDimensions{R}\n\nA type representing the dimensions of a quantity, with each field giving the power of the corresponding dimension. For example, the dimensions of velocity are Dimensions(length=1, time=-1). Each of the 7 dimensions are stored using the type R, which is by default a rational number.\n\nFields\n\nlength: length dimension (i.e., meters^(length))\nmass: mass dimension (i.e., kg^(mass))\ntime: time dimension (i.e., s^(time))\ncurrent: current dimension (i.e., A^(current))\ntemperature: temperature dimension (i.e., K^(temperature))\nluminosity: luminosity dimension (i.e., cd^(luminosity))\namount: amount dimension (i.e., mol^(amount))\n\nConstructors\n\nDimensions(args...): Pass all the dimensions as arguments.\nDimensions(; kws...): Pass a subset of dimensions as keyword arguments. R is set to DEFAULT_DIM_BASE_TYPE.\nDimensions(::Type{R}; kws...) or Dimensions{R}(; kws...): Pass a subset of dimensions as keyword arguments, with the output type set to Dimensions{R}.\nDimensions{R}(): Create a dimensionless object typed as Dimensions{R}.\nDimensions{R}(d::Dimensions): Copy the dimensions from another Dimensions object, with the output type set to Dimensions{R}.\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Types","title":"Types","text":"There are also abstract types available. There are no required functions to build an interface, most relevant functions are defined on the abstract functions (including constructors).","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"AbstractDimensions\nAbstractQuantity","category":"page"},{"location":"types/#DynamicQuantities.AbstractDimensions","page":"Types","title":"DynamicQuantities.AbstractDimensions","text":"AbstractDimensions{R}\n\nAn abstract type for dimension types. R is the type of the exponents of the dimensions, and by default is set to DynamicQuantities.DEFAULT_DIM_BASE_TYPE. AbstractDimensions are used to store the dimensions of UnionAbstractQuantity objects. Together these enable many operators in Base to manipulate dimensions. This type has generic constructors for creating dimension objects, so user-defined dimension types can be created by simply subtyping AbstractDimensions, without the need to define many other functions.\n\nThe key function that one could wish to overload is DynamicQuantities.dimension_name(::AbstractDimensions, k::Symbol) for mapping from a field name to a base unit (e.g., length by default maps to m). You may also need to overload constructorof(::Type{T}) in case of non-standard construction.\n\n\n\n\n\n","category":"type"},{"location":"types/#DynamicQuantities.AbstractQuantity","page":"Types","title":"DynamicQuantities.AbstractQuantity","text":"AbstractQuantity{T,D} <: Number\n\nAn abstract type for quantities. T is the type of the value of the quantity, which should be <:Number. D is the type of the dimensions of the quantity. By default, D is set to DynamicQuantities.DEFAULT_DIM_TYPE. T is inferred from the value in a calculation, but in other cases is defaulted to DynamicQuantities.DEFAULT_VALUE_TYPE. It is assumed that the value is stored in the :value field, and the dimensions object is stored in the :dimensions field. These fields can be accessed with ustrip and dimension, respectively. Many operators in Base are defined on AbstractQuantity objects, including +, -, *, /, ^, sqrt, cbrt, abs.\n\nSee also AbstractGenericQuantity for creating quantities subtyped to Any.\n\nNote: In general, you should probably specialize on UnionAbstractQuantity which is the union of both AbstractQuantity and AbstractGenericQuantity, as well as any other future abstract quantity types,\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Types","title":"Types","text":"Note also that the Quantity object can take a custom AbstractDimensions as input, so there is often no need to subtype AbstractQuantity separately.","category":"page"},{"location":"types/#Symbolic-dimensions","page":"Types","title":"Symbolic dimensions","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Another type which subtypes AbstractDimensions is SymbolicDimensions:","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"SymbolicDimensions","category":"page"},{"location":"types/#DynamicQuantities.SymbolicDimensions","page":"Types","title":"DynamicQuantities.SymbolicDimensions","text":"SymbolicDimensions{R} <: AbstractDimensions{R}\n\nAn AbstractDimensions with one dimension for every unit and constant symbol. This is to allow for lazily reducing to SI base units, whereas Dimensions is always in SI base units. Furthermore, SymbolicDimensions stores dimensions using a sparse vector for efficiency (since there are so many unit symbols).\n\nYou can convert a quantity using SymbolicDimensions as its dimensions to one which uses Dimensions as its dimensions (i.e., base SI units) uexpand.\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Types","title":"Types","text":"Just note that all of the symbolic units and constants are stored using the immutable SymbolicDimensionsSingleton, which shares the same supertype AbstractSymbolicDimensions <: AbstractDimensions. These get immediately converted to the mutable SymbolicDimensions when used in any calculation.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"SymbolicDimensionsSingleton\nAbstractSymbolicDimensions","category":"page"},{"location":"types/#DynamicQuantities.SymbolicDimensionsSingleton","page":"Types","title":"DynamicQuantities.SymbolicDimensionsSingleton","text":"SymbolicDimensionsSingleton{R} <: AbstractSymbolicDimensions{R}\n\nThis special symbolic dimensions types stores a single unit or constant, and can be used for constructing symbolic units and constants without needing to allocate mutable storage.\n\n\n\n\n\n","category":"type"},{"location":"types/#DynamicQuantities.AbstractSymbolicDimensions","page":"Types","title":"DynamicQuantities.AbstractSymbolicDimensions","text":"AbstractSymbolicDimensions{R} <: AbstractDimensions{R}\n\nAbstract type to allow for custom types of symbolic dimensions. In defining this abstract type we allow for units to declare themselves as a special type of symbolic dimensions which are immutable, whereas the regular SymbolicDimensions type has mutable storage.\n\n\n\n\n\n","category":"type"},{"location":"types/#Arrays","page":"Types","title":"Arrays","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"QuantityArray","category":"page"},{"location":"types/#DynamicQuantities.QuantityArray","page":"Types","title":"DynamicQuantities.QuantityArray","text":"QuantityArray{T,N,D<:AbstractDimensions,Q<:UnionAbstractQuantity,V<:AbstractArray}\n\nAn array of quantities with value value of type V and dimensions dimensions of type D (which are shared across all elements of the array). This is a subtype of AbstractArray{Q,N}, and so can be used in most places where a normal array would be used, including broadcasting operations.\n\nFields\n\nvalue: The underlying array of values. Access with ustrip(a).\ndimensions: The dimensions of the array. Access with dimension(a).\n\nConstructors\n\nQuantityArray(v::AbstractArray, d::AbstractDimensions): Create a QuantityArray with value v and dimensions d, using Quantity if the eltype of v is numeric, and GenericQuantity otherwise.\nQuantityArray(v::AbstractArray{<:Number}, q::AbstractQuantity): Create a QuantityArray with value v and dimensions inferred  with dimension(q). This is so that you can easily create an array with the units module, like so:  julia  julia> A = QuantityArray(randn(32), 1u\"m\")\nQuantityArray(v::AbstractArray{<:Any}, q::AbstractGenericQuantity): Create a QuantityArray with   value v and dimensions inferred with dimension(q).   This is so that you can easily create quantity arrays of non-numeric eltypes, like so:  julia  julia> A = QuantityArray([[1.0], [2.0, 3.0]], GenericQuantity(1u\"m\"))\nQuantityArray(v::AbstractArray{<:UnionAbstractQuantity}): Create a QuantityArray from an array of quantities. This means the following syntax works:\njulia> A = QuantityArray(randn(32) .* 1u\"km/s\")\nQuantityArray(v::AbstractArray; kws...): Create a QuantityArray with dimensions inferred from the keyword arguments. For example:\njulia> A = QuantityArray(randn(32); length=1)\nis equivalent to\njulia> A = QuantityArray(randn(32), u\"m\")\nThe keyword arguments are passed to DEFAULT_DIM_TYPE.\n\n\n\n\n\n","category":"type"},{"location":"types/#Generic-quantities","page":"Types","title":"Generic quantities","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Whereas Quantity is subtyped to Number, a more general type of quantity is GenericQuantity, which is subtyped to Any.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"GenericQuantity\nAbstractGenericQuantity","category":"page"},{"location":"types/#DynamicQuantities.GenericQuantity","page":"Types","title":"DynamicQuantities.GenericQuantity","text":"GenericQuantity{T<:Any,D<:AbstractDimensions} <: AbstractGenericQuantity{T,D} <: Any\n\nThis has the same behavior as Quantity but is subtyped to AbstractGenericQuantity <: Any rather than AbstractQuantity <: Number.\n\n\n\n\n\n","category":"type"},{"location":"types/#DynamicQuantities.AbstractGenericQuantity","page":"Types","title":"DynamicQuantities.AbstractGenericQuantity","text":"AbstractGenericQuantity{T,D} <: Any\n\nThis has the same behavior as AbstractQuantity but is subtyped to Any rather than Number.\n\nNote: In general, you should probably specialize on UnionAbstractQuantity which is the union of both AbstractQuantity and AbstractGenericQuantity, as well as any other future abstract quantity types,\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Types","title":"Types","text":"In the other direction, there is also RealQuantity, which is subtyped to Real.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"RealQuantity\nAbstractRealQuantity","category":"page"},{"location":"types/#DynamicQuantities.RealQuantity","page":"Types","title":"DynamicQuantities.RealQuantity","text":"RealQuantity{T<:Real,D<:AbstractDimensions} <: AbstractRealQuantity{T,D} <: Real\n\nThis has the same behavior as Quantity but is subtyped to AbstractRealQuantity <: Real.\n\n\n\n\n\n","category":"type"},{"location":"types/#DynamicQuantities.AbstractRealQuantity","page":"Types","title":"DynamicQuantities.AbstractRealQuantity","text":"AbstractRealQuantity{T,D} <: Real\n\nThis has the same behavior as AbstractQuantity but is subtyped to Real rather than Number.\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Types","title":"Types","text":"More general, these are each contained in the following:","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"UnionAbstractQuantity\nDynamicQuantities.ABSTRACT_QUANTITY_TYPES","category":"page"},{"location":"types/#DynamicQuantities.UnionAbstractQuantity","page":"Types","title":"DynamicQuantities.UnionAbstractQuantity","text":"UnionAbstractQuantity{T,D}\n\nThis is a union of both AbstractQuantity{T,D} and AbstractGenericQuantity{T,D}. It is used throughout the library to declare methods which can take both types. You should generally specialize on this type, rather than its constituents, as it will also include future abstract quantity types.\n\n\n\n\n\n","category":"type"},{"location":"types/#DynamicQuantities.ABSTRACT_QUANTITY_TYPES","page":"Types","title":"DynamicQuantities.ABSTRACT_QUANTITY_TYPES","text":"ABSTRACT_QUANTITY_TYPES\n\nA constant tuple of the existing abstract quantity types, each as a tuple with (1) the abstract type, (2) the base type, and (3) the default exported concrete type.\n\n\n\n\n\n","category":"constant"},{"location":"types/#Custom-behavior-in-abstract-quantities","page":"Types","title":"Custom behavior in abstract quantities","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"There are a few functions you may need to overload when subtyping AbstractDimensions, AbstractQuantity, or AbstractGenericQuantity.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"constructorof\nwith_type_parameters\ndimension_names","category":"page"},{"location":"types/#DynamicQuantities.constructorof","page":"Types","title":"DynamicQuantities.constructorof","text":"constructorof(::Type{<:AbstractDimensions})\nconstructorof(::Type{<:UnionAbstractQuantity})\n\nReturn the constructor of the given type. This is used to create new objects of the same type as the input. Overload a method for a new type, especially if you need custom behavior.\n\n\n\n\n\n","category":"function"},{"location":"types/#DynamicQuantities.with_type_parameters","page":"Types","title":"DynamicQuantities.with_type_parameters","text":"with_type_parameters(::Type{<:AbstractDimensions}, ::Type{R})\nwith_type_parameters(::Type{<:UnionAbstractQuantity}, ::Type{T}, ::Type{D})\n\nReturn the type with the given type parameters instead of the ones in the input type. This is used to get Dimensions{R} from input (Dimensions{R1}, R), for example. Overload a method for a new type, especially if you need custom behavior.\n\n\n\n\n\n","category":"function"},{"location":"types/#DynamicQuantities.dimension_names","page":"Types","title":"DynamicQuantities.dimension_names","text":"dimension_names(::Type{<:AbstractDimensions})\n\nReturn a tuple of symbols with the names of the dimensions of the given type. This should be static so that it can be hardcoded during compilation. The default is to use fieldnames, but you can overload this for custom behavior.\n\n\n\n\n\n","category":"function"}]
}
